import random

from pytgbot import Bot
from semac_back import SemacBackend
from semac_front import SemacFrontend
from nlp import analyze_text
from variables import ALLOWED_IDS, BOT_TOKEN

# Some const
PRIVATE_COMMANDS = ['deploy', 'roolback', 'view']

def get_default_fallback():
    return random.choice(['Lamento, mas n√£o compreendi.',
                          'Desculpe, mas eu n√£o consigo. üòê',
                          'Infelizmente, n√£o captei o que deseja. üòî',
                          'N√£o consegui entender, desculpe.',
                          'Isso n√£o me diz nada.',
                          'Puxa, n√£o foi dessa fez, mas continue tentando. Tchau!'])


def get_authorization_fallback():
    return random.choice(['Voc√™ n√£o est√° autorizado para fazer isso...',
                          'Desculpe, isso √© apenas para os adultos.',
                          'Sorry, n√£o posso deixar que voc√™ fa√ßa isso.',
                          'Queria muito poder te ajudar, mas n√£o posso.',
                          'Eu n√£o estou autorizado a fazer isso pra voc√™ üòî',
                          'Me falaram que s√≥ a staff pode fazer esse tipo de coisa, e eu tenho que respeitar eles.',])


def get_welcome_fallback():
    return random.choice(['Ol√°!',
                          'Oi!',
                          'Sauda√ß√µes!',
                          'Opa!',
                          'Tudo bem?',
                          'Ol√°! √â muito bom ter voc√™ por aqui. üòÅ',])


def get_online_fallback():
    return random.choice(['Est√° tudo √≥timo!',
                          'Estou online e pronto pra qualquer coisa.',
                          'Tudo sim!',
                          'Melhor imposs√≠vel!',
                          'Deixa eu verificar... sistemas funcionando normalmente, tudo em seu devido lugar... √©, eu'
                          'estou bem sim. Obrigado por perguntar!',
                          'Estou sim! Obrigado por perguntar.',
                          'Ol√°. Tudo bem. Obrigada por perguntar.',
                          'Tudo as mil maravilhas, o que posso fazer por voc√™?',
                          'Melhor imposs√≠vel!',])


def get_doing_fallback(action, name):
    return random.choice([f'√â pra j√°!\nFazendo o {action} do {name} agora mesmo.',
                          f'Iniciando o {action} do {name} nesse instante.',
                          f'Deixa comigo! Come√ßando o {action} do {name}...',
                          f'Tudo bem, fazendo o {action} do {name} agorinha!'
                          f'{name} √© comigo mesmo, fazendo o {action} agora',
                          f'Mal posso esperar para isso, come√ßando o {action} do {name}.',
                          f'J√° era hora, vou fazer {action} do {name} com muito amor.\nEu te aviso se alguma coisa der errado',
                          f'Vou fazer o {action} do {name} com muito cuidado.'])


def get_bad_word_correction():
    return random.choice(['Que coisa feia, voc√™ n√£o deveria falar isso.',
                          'Acho que vou ter que lavar sua boca com sab√£o.',
                          'Sua m√£o n√£o te ensinou modos, n√£o?',
                          'N√£o vou nem falar nada.',
                          'Quem est√° falando? √â a Dercy?',
                          'Puxa vida üòî\nSe voc√™ quiser reportar algo, me envie um coment√°rio.'])


def was_made_by_staff(context):
    return context['message']['from']['id'] in ALLOWED_IDS


def get_text(context):
    return context['message']['text'] if 'text' in context['message'] else None


def get_user_id(context):
    return context['message']['from']['id']


def process_input(context):
    text = get_text(context)
    context = analyze_text(text, context)
    print(context)

    if not context['intent'] in PRIVATE_COMMANDS:
        process_regular_command(context)
    elif was_made_by_staff(context):
        process_private_command(context)
    else:
        bot.send_message(get_user_id(context), get_authorization_fallback())


def process_regular_command(context):
    user_id = get_user_id(context)

    if context['intent'] == 'hi':
        bot.send_message(user_id, get_welcome_fallback())
    elif context['intent'] == 'ruok':
        bot.send_message(user_id, get_online_fallback())
    elif context['intent'] == 'badword':
        bot.send_message(user_id, get_bad_word_correction())
    elif context['intent'] == 'exit':
        bot.send_message(user_id, get_authorization_fallback())
    else:
        bot.send_message(user_id, get_default_fallback())


def process_private_command(context):
    user_id = get_user_id(context)

    if context['intent'] == 'deploy' and 'type' in context['parameters']:

        if context['parameters']['type'] == 'frontend':
            bot.send_message(user_id, get_doing_fallback('deploy', 'frontend'))
            SemacFrontend(bot, user_id).deploy()
        elif context['parameters']['type'] == 'backend':
            bot.send_message(user_id, get_doing_fallback('deploy', 'backend'))
            SemacBackend(bot, user_id).deploy()

    elif context['intent'] == 'roolback' and 'type' in context['parameters']:
        if context['parameters']['type'] == 'frontend':
            bot.send_message(user_id, get_doing_fallback('roolback', 'frontend'))
            SemacFrontend(bot, user_id).revert()
        elif context['parameters']['type'] == 'backend':
            bot.send_message(user_id, get_doing_fallback('roolback', 'backend'))
            SemacBackend(bot, user_id).revert()

    elif context['intent'] == 'view' and 'type' in context['parameters']:
        if context['parameters']['type'] == 'frontend':
            SemacFrontend(bot, user_id).show_actual_version()
        elif context['parameters']['type'] == 'backend':
            SemacBackend(bot, user_id).show_actual_version()

    else:
        bot.send_message(user_id, get_default_fallback())


# Setup bot
bot = Bot(BOT_TOKEN)

# Sending a message when bot is on
bot.send_message(ALLOWED_IDS[0], "Estou online de novo!")

# Get last message sended
last_update_id = 0
while True:
    for update in bot.get_updates(limit=100, offset=last_update_id+1):
        last_update_id = update.update_id
        process_input(update.to_array())
